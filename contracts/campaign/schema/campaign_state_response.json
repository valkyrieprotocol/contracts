{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CampaignStateResponse",
  "type": "object",
  "required": [
    "actor_count",
    "balances",
    "cumulative_participation_reward_amount",
    "cumulative_referral_reward_amount",
    "deposit_amount",
    "is_active",
    "is_pending",
    "locked_balances",
    "participation_count"
  ],
  "properties": {
    "actor_count": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "balances": {
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/Denom"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "cumulative_participation_reward_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "cumulative_referral_reward_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "deposit_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "is_active": {
      "type": "boolean"
    },
    "is_pending": {
      "type": "boolean"
    },
    "locked_balances": {
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "$ref": "#/definitions/Denom"
          },
          {
            "$ref": "#/definitions/Uint128"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    },
    "participation_count": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "Denom": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
